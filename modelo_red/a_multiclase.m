clearvars, clc

% Extrae los datos de simpleclass_dataset
[x, t] = simpleclass_dataset;

%%
oculta1 = capa(2, 16, 'relu');
salida = capa(16, 4, 'softmax');
M = modelo(x,{oculta1, salida});

%%
epocas = 20;

E_SGD = entrenamiento_test(x, t, M, ...
    'epochs', epocas, ...
    'learningRate', 0.1, ...
    'lossFunction', 'cross entropy', ...
    'trainAlgorithm', 'SGD', ...
    'optimizer', 'GD');

E_NAG = entrenamiento_test(x, t, M, ...
    'epochs', epocas, ...
    'learningRate', 0.1, ...
    'lossFunction', 'cross entropy', ...
    'trainAlgorithm', 'MBGD', ...
    'batch_size', 100, ...
    'optimizer', 'NAG');


E_MBGD = entrenamiento_test(x, t, M, ...
    'epochs', epocas, ...
    'learningRate', 0.1, ...
    'lossFunction', 'cross entropy', ...
    'trainAlgorithm', 'MBGD', ...
    'batch_size', 100, ...
    'optimizer', 'GD');


E_Mom = entrenamiento_test(x, t, M, ...
    'epochs', epocas, ...
    'learningRate', 0.1, ...
    'lossFunction', 'cross entropy', ...
    'trainAlgorithm', 'MBGD', ...
    'batch_size', 100, ...
    'optimizer', 'momentum');

%%

mapa_prob(E_SGD, t, 'Stochastic gradient descent');
mapa_prob(E_MBGD, t,  'Mini-Batch gradient descent');
%mapa_prob(E_MBGD, t,  'Mini-Batch gradient descent');
mapa_prob(E_Mom, t,  'gradient descent with momentum');
mapa_prob(E_NAG, t,  'Nesterov Accelerated Gradient');

figure()
plot(1:epocas, E_SGD.C, 1:epocas, E_MBGD.C, 1:epocas, E_Mom.C, 1:epocas, E_NAG.C, 'LineWidth', 1);
legend('SGD', 'Mini-Batch Gradient Descent', 'Gradient descent with Momentum', 'Nesterov Accelerated Gradient');
